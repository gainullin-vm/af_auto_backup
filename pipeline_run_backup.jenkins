#!groovy


pipeline {
	agent { node ("dev02") }
	options {
		buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
		timestamps()
	}
	stages {
		stage("Login Dockerhub") {
			steps {
				withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
                                sh  ("""
                                curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : *Branch*: ${env.GIT_BRANCH} *Deploying!*'
                                """)
                                }
				echo "=====================Authentification====================="
				sh "docker login -u avalancheforecast -p "
			}
		}
		stage("Remove previous container version!") {
			steps {
				sh "docker stop pipe_backup"
				sh "docker rm pipe_backup"
				sh "docker rmi avalancheforecast/main:pipe_backup"
				echo "Done!"
				withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
                                sh  ("""
                                curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : *Branch*: ${env.GIT_BRANCH} *Container and image removed!*'
                                """)
                                }
			}
		}
		stage("Run container from Dockerhub") {
			steps {
				echo "=====================Running====================="
				sh "docker run -d --name pipe_backup --restart=always avalancheforecast/main:pipe_backup"
			}
		}
	}
	  post {
          success { 
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *RUNNIG* : OK *Published* = YES'
          """)
          }
          }
          aborted {
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *RUNNIG* : `Aborted` *Published* = `Aborted`'
          """)
          }
          }
          failure {
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC  *Branch*: ${env.GIT_BRANCH} *RUNNIG* : `FAILURE!` *Published* = `no`'
          """)
          }
          }
        }
}
